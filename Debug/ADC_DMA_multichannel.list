
ADC_DMA_multichannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f70  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000008  08006164  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  2000001c  08006178  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000180  08006178  00020180  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014386  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002804  00000000  00000000  000343d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001870  00000000  00000000  00036bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001768  00000000  00000000  00038448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000231d6  00000000  00000000  00039bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015152  00000000  00000000  0005cd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e9419  00000000  00000000  00071ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0015b2f1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006974  00000000  00000000  0015b344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	08006098 	.word	0x08006098

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	08006098 	.word	0x08006098

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 fcbc 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f822 	bl	8000a70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a2c:	f000 f88a 	bl	8000b44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f9ce 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a34:	f000 f9ba 	bl	8000dac <MX_DMA_Init>
  MX_ADC1_Init();
 8000a38:	f000 f8a2 	bl	8000b80 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a3c:	f000 f940 	bl	8000cc0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <main+0x44>)
 8000a44:	f004 fc40 	bl	80052c8 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a48:	217f      	movs	r1, #127	; 0x7f
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <main+0x48>)
 8000a4c:	f002 f85a 	bl	8002b04 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_LEN); //start ADC -> read adc1 value -> read adc2 value -> read adc3 value and stop ADC
 8000a50:	2204      	movs	r2, #4
 8000a52:	4906      	ldr	r1, [pc, #24]	; (8000a6c <main+0x4c>)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0x48>)
 8000a56:	f001 f8a7 	bl	8001ba8 <HAL_ADC_Start_DMA>
      HAL_Delay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f000 fd26 	bl	80014ac <HAL_Delay>
      HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_LEN); //start ADC -> read adc1 value -> read adc2 value -> read adc3 value and stop ADC
 8000a60:	e7f6      	b.n	8000a50 <main+0x30>
 8000a62:	bf00      	nop
 8000a64:	200000fc 	.word	0x200000fc
 8000a68:	20000038 	.word	0x20000038
 8000a6c:	20000158 	.word	0x20000158

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09a      	sub	sp, #104	; 0x68
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2248      	movs	r2, #72	; 0x48
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fb02 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a9e:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ab2:	2323      	movs	r3, #35	; 0x23
 8000ab4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ace:	2360      	movs	r3, #96	; 0x60
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ade:	2318      	movs	r3, #24
 8000ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000af2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f91f 	bl	8003d3c <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b04:	f000 fa82 	bl	800100c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b08:	236f      	movs	r3, #111	; 0x6f
 8000b0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fc7b 	bl	8004424 <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b34:	f000 fa6a 	bl	800100c <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3768      	adds	r7, #104	; 0x68
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58000400 	.word	0x58000400

08000b44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2250      	movs	r2, #80	; 0x50
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 fa99 	bl	8006088 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000b60:	2310      	movs	r3, #16
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 f86f 	bl	8004c4a <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000b72:	f000 fa4b 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000b98:	4a44      	ldr	r2, [pc, #272]	; (8000cac <MX_ADC1_Init+0x12c>)
 8000b9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b9c:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba2:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bae:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb4:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bba:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bf8:	221c      	movs	r2, #28
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c10:	f000 fe7e 	bl	8001910 <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000c1a:	f000 f9f7 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <MX_ADC1_Init+0x130>)
 8000c20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c22:	2306      	movs	r3, #6
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000c26:	2305      	movs	r3, #5
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2a:	237f      	movs	r3, #127	; 0x7f
 8000c2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	463b      	mov	r3, r7
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c3c:	f001 fa02 	bl	8002044 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000c46:	f000 f9e1 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_ADC1_Init+0x134>)
 8000c4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c58:	f001 f9f4 	bl	8002044 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000c62:	f000 f9d3 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_ADC1_Init+0x138>)
 8000c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c6a:	2312      	movs	r3, #18
 8000c6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c74:	f001 f9e6 	bl	8002044 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000c7e:	f000 f9c5 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_ADC1_Init+0x13c>)
 8000c84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c86:	2318      	movs	r3, #24
 8000c88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_ADC1_Init+0x128>)
 8000c90:	f001 f9d8 	bl	8002044 <HAL_ADC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000c9a:	f000 f9b7 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000038 	.word	0x20000038
 8000cac:	50040000 	.word	0x50040000
 8000cb0:	1d500080 	.word	0x1d500080
 8000cb4:	21800100 	.word	0x21800100
 8000cb8:	25b00200 	.word	0x25b00200
 8000cbc:	2a000400 	.word	0x2a000400

08000cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1a:	4823      	ldr	r0, [pc, #140]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d1c:	f004 fa1c 	bl	8005158 <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f000 f971 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481c      	ldr	r0, [pc, #112]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d38:	f004 fcb4 	bl	80056a4 <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d42:	f000 f963 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d46:	4818      	ldr	r0, [pc, #96]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d48:	f004 fa5d 	bl	8005206 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d52:	f000 f95b 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4810      	ldr	r0, [pc, #64]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d66:	f005 f90b 	bl	8005f80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d70:	f000 f94c 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d8c:	f004 fb76 	bl	800547c <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d96:	f000 f939 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_TIM2_Init+0xe8>)
 8000d9c:	f000 fa0c 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000fc 	.word	0x200000fc

08000dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000db0:	2004      	movs	r0, #4
 8000db2:	f7ff fe03 	bl	80009bc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff fe00 	bl	80009bc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	200b      	movs	r0, #11
 8000dc2:	f002 f80e 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc6:	200b      	movs	r0, #11
 8000dc8:	f002 f825 	bl	8002e16 <HAL_NVIC_EnableIRQ>

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff fe02 	bl	80009ee <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2002      	movs	r0, #2
 8000dec:	f7ff fdff 	bl	80009ee <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <MX_GPIO_Init+0x4c>)
 8000df6:	f002 fc0d 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <MX_GPIO_Init+0x4c>)
 8000e10:	f002 fa90 	bl	8003334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<4; i++){
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e00a      	b.n	8000e44 <HAL_ADC_ConvHalfCpltCallback+0x24>
		adc[i] = buffer[i];// store the values in adc[]
 8000e2e:	4a62      	ldr	r2, [pc, #392]	; (8000fb8 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e36:	4961      	ldr	r1, [pc, #388]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<4; i++){
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	ddf1      	ble.n	8000e2e <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
  vOUT = (adc[0] * 4.987) / 65535.0; //vOUT = (adc[0] * 5.0) / 2^16;
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad8 	bl	8000404 <__aeabi_ui2d>
 8000e54:	a354      	add	r3, pc, #336	; (adr r3, 8000fa8 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fb4d 	bl	80004f8 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	a352      	add	r3, pc, #328	; (adr r3, 8000fb0 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fc6e 	bl	800074c <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fd50 	bl	800091c <__aeabi_d2f>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a50      	ldr	r2, [pc, #320]	; (8000fc0 <HAL_ADC_ConvHalfCpltCallback+0x1a0>)
 8000e80:	6013      	str	r3, [r2, #0]
  vIN = vOUT / (R2/(R1+R2));
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <HAL_ADC_ConvHalfCpltCallback+0x1a0>)
 8000e84:	edd3 6a00 	vldr	s13, [r3]
 8000e88:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 8000e8a:	ed93 6a00 	vldr	s12, [r3]
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <HAL_ADC_ConvHalfCpltCallback+0x1a8>)
 8000e90:	ed93 7a00 	vldr	s14, [r3]
 8000e94:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8000ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <HAL_ADC_ConvHalfCpltCallback+0x1ac>)
 8000ea8:	edc3 7a00 	vstr	s15, [r3]
  Amps = (adc[1] * 10) / 65535.0; //Amps = 2 * (ADC val / 2^16) * 5
 8000eac:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa3 	bl	8000404 <__aeabi_ui2d>
 8000ebe:	a33c      	add	r3, pc, #240	; (adr r3, 8000fb0 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fc42 	bl	800074c <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd24 	bl	800091c <__aeabi_d2f>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a3e      	ldr	r2, [pc, #248]	; (8000fd0 <HAL_ADC_ConvHalfCpltCallback+0x1b0>)
 8000ed8:	6013      	str	r3, [r2, #0]
  //Both voltage-psi are linear: 0psi = 0.5V, 200psi = 4.5V => psi = 50V-25
  Psi_1 = 50 * (adc[2] * 5.0 / 65535.0) -25;
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fa90 	bl	8000404 <__aeabi_ui2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_ADC_ConvHalfCpltCallback+0x1b4>)
 8000eea:	f7ff fb05 	bl	80004f8 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	a32e      	add	r3, pc, #184	; (adr r3, 8000fb0 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fc26 	bl	800074c <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_ADC_ConvHalfCpltCallback+0x1b8>)
 8000f0e:	f7ff faf3 	bl	80004f8 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_ADC_ConvHalfCpltCallback+0x1bc>)
 8000f20:	f7ff f932 	bl	8000188 <__aeabi_dsub>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fcf6 	bl	800091c <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <HAL_ADC_ConvHalfCpltCallback+0x1c0>)
 8000f34:	6013      	str	r3, [r2, #0]
  Psi_2 = 50 * (adc[3] * 5.0 / 65535.0) -25;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa62 	bl	8000404 <__aeabi_ui2d>
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_ADC_ConvHalfCpltCallback+0x1b4>)
 8000f46:	f7ff fad7 	bl	80004f8 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	a317      	add	r3, pc, #92	; (adr r3, 8000fb0 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fbf8 	bl	800074c <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_ConvHalfCpltCallback+0x1b8>)
 8000f6a:	f7ff fac5 	bl	80004f8 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_ConvHalfCpltCallback+0x1bc>)
 8000f7c:	f7ff f904 	bl	8000188 <__aeabi_dsub>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fcc8 	bl	800091c <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8000f90:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2101      	movs	r1, #1
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000f98:	f002 fb3c 	bl	8003614 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	20c49ba6 	.word	0x20c49ba6
 8000fac:	4013f2b0 	.word	0x4013f2b0
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	40efffe0 	.word	0x40efffe0
 8000fb8:	20000158 	.word	0x20000158
 8000fbc:	20000148 	.word	0x20000148
 8000fc0:	20000168 	.word	0x20000168
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	2000016c 	.word	0x2000016c
 8000fd0:	20000170 	.word	0x20000170
 8000fd4:	40140000 	.word	0x40140000
 8000fd8:	40490000 	.word	0x40490000
 8000fdc:	40390000 	.word	0x40390000
 8000fe0:	20000174 	.word	0x20000174
 8000fe4:	20000178 	.word	0x20000178
 8000fe8:	48000400 	.word	0x48000400

08000fec <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ffa:	f002 fb0b 	bl	8003614 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	48000400 	.word	0x48000400

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>

08001016 <LL_AHB2_GRP1_EnableClock>:
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800101e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4313      	orrs	r3, r2
 800102c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09c      	sub	sp, #112	; 0x70
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2250      	movs	r2, #80	; 0x50
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 ffed 	bl	8006088 <memset>
  if(hadc->Instance==ADC1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a36      	ldr	r2, [pc, #216]	; (800118c <HAL_ADC_MspInit+0x104>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d165      	bne.n	8001184 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80010be:	2318      	movs	r3, #24
 80010c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80010c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80010c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80010ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80010d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fdb0 	bl	8004c4a <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80010f0:	f7ff ff8c 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010f8:	f7ff ff8d 	bl	8001016 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff8a 	bl	8001016 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001102:	233c      	movs	r3, #60	; 0x3c
 8001104:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	2303      	movs	r3, #3
 8001108:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f002 f90c 	bl	8003334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_ADC_MspInit+0x108>)
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_ADC_MspInit+0x10c>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_ADC_MspInit+0x108>)
 8001124:	2205      	movs	r2, #5
 8001126:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_ADC_MspInit+0x108>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_ADC_MspInit+0x108>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_ADC_MspInit+0x108>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_ADC_MspInit+0x108>)
 800113c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001140:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_ADC_MspInit+0x108>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_ADC_MspInit+0x108>)
 800114c:	2220      	movs	r2, #32
 800114e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_ADC_MspInit+0x108>)
 8001152:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <HAL_ADC_MspInit+0x108>)
 800115a:	f001 fe77 	bl	8002e4c <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001164:	f7ff ff52 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_ADC_MspInit+0x108>)
 800116c:	64da      	str	r2, [r3, #76]	; 0x4c
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_ADC_MspInit+0x108>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2012      	movs	r0, #18
 800117a:	f001 fe32 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800117e:	2012      	movs	r0, #18
 8001180:	f001 fe49 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3770      	adds	r7, #112	; 0x70
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	50040000 	.word	0x50040000
 8001190:	2000009c 	.word	0x2000009c
 8001194:	40020008 	.word	0x40020008

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d102      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff4c 	bl	8001048 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d113      	bne.n	8001202 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff ff1b 	bl	8001016 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e0:	2301      	movs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f002 f899 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120e:	e7fe      	b.n	800120e <NMI_Handler+0x4>

08001210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <HardFault_Handler+0x4>

08001216 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <BusFault_Handler+0x4>

08001222 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f8fd 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA1_Channel1_IRQHandler+0x10>)
 8001266:	f001 ff14 	bl	8003092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000009c 	.word	0x2000009c

08001274 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <ADC1_IRQHandler+0x10>)
 800127a:	f000 fd19 	bl	8001cb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000038 	.word	0x20000038

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <SystemInit+0x98>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <SystemInit+0x98>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <SystemInit+0x9c>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d2:	f023 0305 	bic.w	r3, r3, #5
 80012d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <SystemInit+0xa0>)
 80012f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <SystemInit+0xa0>)
 80012fc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	faf6fefb 	.word	0xfaf6fefb
 8001328:	22041000 	.word	0x22041000

0800132c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800132c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001330:	3304      	adds	r3, #4

08001332 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001332:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001334:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001336:	d3f9      	bcc.n	800132c <CopyDataInit>
  bx lr
 8001338:	4770      	bx	lr

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800133a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800133c:	3004      	adds	r0, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800133e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>
  bx lr
 8001342:	4770      	bx	lr

08001344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff ff9e 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <LoopForever+0x6>)
 800134e:	490c      	ldr	r1, [pc, #48]	; (8001380 <LoopForever+0xa>)
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <LoopForever+0xe>)
 8001352:	2300      	movs	r3, #0
 8001354:	f7ff ffed 	bl	8001332 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopForever+0x12>)
 800135a:	490c      	ldr	r1, [pc, #48]	; (800138c <LoopForever+0x16>)
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <LoopForever+0x1a>)
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff ffe7 	bl	8001332 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <LoopForever+0x1e>)
 8001366:	490c      	ldr	r1, [pc, #48]	; (8001398 <LoopForever+0x22>)
 8001368:	2300      	movs	r3, #0
 800136a:	f7ff ffe8 	bl	800133e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800136e:	f004 fe67 	bl	8006040 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001372:	f7ff fb55 	bl	8000a20 <main>

08001376 <LoopForever>:

LoopForever:
  b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   r0, =_estack
 8001378:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800137c:	20000008 	.word	0x20000008
 8001380:	2000001c 	.word	0x2000001c
 8001384:	08006164 	.word	0x08006164
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001388:	20030000 	.word	0x20030000
 800138c:	20030000 	.word	0x20030000
 8001390:	08006178 	.word	0x08006178
  INIT_BSS _sbss, _ebss
 8001394:	2000001c 	.word	0x2000001c
 8001398:	20000180 	.word	0x20000180

0800139c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <AES1_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_Init+0x3c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_Init+0x3c>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b6:	2003      	movs	r0, #3
 80013b8:	f001 fd08 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013bc:	200f      	movs	r0, #15
 80013be:	f000 f80f 	bl	80013e0 <HAL_InitTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	e001      	b.n	80013d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013ce:	f7ff fe54 	bl	800107a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58004000 	.word	0x58004000

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_InitTick+0x6c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d024      	beq.n	800143e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f4:	f003 f9c4 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_InitTick+0x6c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	fbb3 f3f1 	udiv	r3, r3, r1
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fd10 	bl	8002e32 <HAL_SYSTICK_Config>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10f      	bne.n	8001438 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d809      	bhi.n	8001432 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141e:	2200      	movs	r2, #0
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	f04f 30ff 	mov.w	r0, #4294967295
 8001426:	f001 fcdc 	bl	8002de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_InitTick+0x70>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e007      	b.n	8001442 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e004      	b.n	8001442 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000018 	.word	0x20000018
 8001450:	20000014 	.word	0x20000014

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000018 	.word	0x20000018
 8001478:	2000017c 	.word	0x2000017c

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000017c 	.word	0x2000017c

08001494 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTickPrio+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000014 	.word	0x20000014

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffe2 	bl	800147c <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffd2 	bl	800147c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000018 	.word	0x20000018

080014f4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3360      	adds	r3, #96	; 0x60
 800156e:	461a      	mov	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <LL_ADC_SetOffset+0x44>)
 800157e:	4013      	ands	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	4313      	orrs	r3, r2
 800158c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	03fff000 	.word	0x03fff000

080015a4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3360      	adds	r3, #96	; 0x60
 80015b2:	461a      	mov	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3360      	adds	r3, #96	; 0x60
 80015e0:	461a      	mov	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800161e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3330      	adds	r3, #48	; 0x30
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	4413      	add	r3, r2
 800164a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	211f      	movs	r1, #31
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0e9b      	lsrs	r3, r3, #26
 8001664:	f003 011f 	and.w	r1, r3, #31
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b087      	sub	sp, #28
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3314      	adds	r3, #20
 80016d6:	461a      	mov	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	0e5b      	lsrs	r3, r3, #25
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	0d1b      	lsrs	r3, r3, #20
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2107      	movs	r1, #7
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	0d1b      	lsrs	r3, r3, #20
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	431a      	orrs	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001734:	43db      	mvns	r3, r3
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0318 	and.w	r3, r3, #24
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001740:	40d9      	lsrs	r1, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	400b      	ands	r3, r1
 8001746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	0007ffff 	.word	0x0007ffff

08001764 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6093      	str	r3, [r2, #8]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800179c:	d101      	bne.n	80017a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017ec:	d101      	bne.n	80017f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800183c:	f043 0202 	orr.w	r2, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <LL_ADC_IsEnabled+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_ADC_IsEnabled+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b02      	cmp	r3, #2
 8001888:	d101      	bne.n	800188e <LL_ADC_IsDisableOngoing+0x18>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsDisableOngoing+0x1a>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b0:	f043 0204 	orr.w	r2, r3, #4
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d101      	bne.n	80018dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d101      	bne.n	8001902 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e12e      	b.n	8001b8c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fba3 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff17 	bl	8001788 <LL_ADC_IsDeepPowerDownEnabled>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fefd 	bl	8001764 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff32 	bl	80017d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d115      	bne.n	80019a6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff16 	bl	80017b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001984:	4b83      	ldr	r3, [pc, #524]	; (8001b94 <HAL_ADC_Init+0x284>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	4a83      	ldr	r2, [pc, #524]	; (8001b98 <HAL_ADC_Init+0x288>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff14 	bl	80017d8 <LL_ADC_IsInternalRegulatorEnabled>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff74 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 80019dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 80c7 	bne.w	8001b7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80c3 	bne.w	8001b7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019fc:	f043 0202 	orr.w	r2, r3, #2
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff21 	bl	8001850 <LL_ADC_IsEnabled>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10b      	bne.n	8001a2c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a14:	4861      	ldr	r0, [pc, #388]	; (8001b9c <HAL_ADC_Init+0x28c>)
 8001a16:	f7ff ff1b 	bl	8001850 <LL_ADC_IsEnabled>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4619      	mov	r1, r3
 8001a26:	485e      	ldr	r0, [pc, #376]	; (8001ba0 <HAL_ADC_Init+0x290>)
 8001a28:	f7ff fd64 	bl	80014f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e5b      	ldrb	r3, [r3, #25]
 8001a30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001a4c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d106      	bne.n	8001a6c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	045b      	lsls	r3, r3, #17
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_ADC_Init+0x294>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff0f 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001aa6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff1c 	bl	80018ea <LL_ADC_INJ_IsConversionOngoing>
 8001ab2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d13d      	bne.n	8001b36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d13a      	bne.n	8001b36 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ac4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001acc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001adc:	f023 0302 	bic.w	r3, r3, #2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	69b9      	ldr	r1, [r7, #24]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d118      	bne.n	8001b26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b16:	430a      	orrs	r2, r1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	e007      	b.n	8001b36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10c      	bne.n	8001b58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f023 010f 	bic.w	r1, r3, #15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
 8001b56:	e007      	b.n	8001b68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 020f 	bic.w	r2, r2, #15
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f023 0303 	bic.w	r3, r3, #3
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
 8001b78:	e007      	b.n	8001b8a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0210 	orr.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000010 	.word	0x20000010
 8001b98:	053e2d63 	.word	0x053e2d63
 8001b9c:	50040000 	.word	0x50040000
 8001ba0:	50040300 	.word	0x50040300
 8001ba4:	fff0c007 	.word	0xfff0c007

08001ba8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe83 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d167      	bne.n	8001c94 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x2a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e063      	b.n	8001c9a <HAL_ADC_Start_DMA+0xf2>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fdf8 	bl	80027d0 <ADC_Enable>
 8001be0:	4603      	mov	r3, r0
 8001be2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d14f      	bne.n	8001c8a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f023 0206 	bic.w	r2, r3, #6
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	659a      	str	r2, [r3, #88]	; 0x58
 8001c16:	e002      	b.n	8001c1e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_ADC_Start_DMA+0xfc>)
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_ADC_Start_DMA+0x100>)
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_ADC_Start_DMA+0x104>)
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	221c      	movs	r2, #28
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0210 	orr.w	r2, r2, #16
 8001c54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3340      	adds	r3, #64	; 0x40
 8001c70:	4619      	mov	r1, r3
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f001 f991 	bl	8002f9c <HAL_DMA_Start_IT>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe0a 	bl	800189c <LL_ADC_REG_StartConversion>
 8001c88:	e006      	b.n	8001c98 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c92:	e001      	b.n	8001c98 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
 8001c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08002983 	.word	0x08002983
 8001ca8:	08002a5b 	.word	0x08002a5b
 8001cac:	08002a77 	.word	0x08002a77

08001cb0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d017      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x56>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d012      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 ff8d 	bl	8002c18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x6a>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05d      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d058      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fc5b 	bl	8001606 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03d      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d64:	d035      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d12e      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fda3 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d11a      	bne.n	8001dba <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 020c 	bic.w	r2, r2, #12
 8001d92:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d112      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
 8001db8:	e00b      	b.n	8001dd2 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff f90a 	bl	8000fec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	220c      	movs	r2, #12
 8001dde:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x144>
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d074      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d06f      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc3b 	bl	80016a0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e2a:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fbe8 	bl	8001606 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e36:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d049      	beq.n	8001eda <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x1b0>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d041      	beq.n	8001eda <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d13c      	bne.n	8001eda <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d135      	bne.n	8001eda <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d12e      	bne.n	8001eda <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fd32 	bl	80018ea <LL_ADC_INJ_IsConversionOngoing>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11a      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e9a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d112      	bne.n	8001eda <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec0:	e00b      	b.n	8001eda <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fe74 	bl	8002bc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2260      	movs	r2, #96	; 0x60
 8001ee6:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d011      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x266>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f887 	bl	800201c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <HAL_ADC_IRQHandler+0x296>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fe5a 	bl	8002bf0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x2c6>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00d      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fe4c 	bl	8002c04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d02b      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x328>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d026      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e009      	b.n	8001fac <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb71 	bl	8001684 <LL_ADC_REG_GetDMATransfer>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f830 	bl	8002030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d018      	beq.n	8002014 <HAL_ADC_IRQHandler+0x364>
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f043 0208 	orr.w	r2, r3, #8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800200c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fde4 	bl	8002bdc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0b6      	sub	sp, #216	; 0xd8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x22>
 8002062:	2302      	movs	r3, #2
 8002064:	e39f      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x762>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fc26 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8384 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	f7ff facd 	bl	800162c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc14 	bl	80018c4 <LL_ADC_REG_IsConversionOngoing>
 800209c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fc20 	bl	80018ea <LL_ADC_INJ_IsConversionOngoing>
 80020aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 81a6 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 81a1 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f7ff faf9 	bl	80016c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	08db      	lsrs	r3, r3, #3
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d00a      	beq.n	800210c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002106:	f7ff fa29 	bl	800155c <LL_ADC_SetOffset>
 800210a:	e17b      	b.n	8002404 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fa46 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0xf4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fa3b 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	e01e      	b.n	8002176 <HAL_ADC_ConfigChannel+0x132>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fa30 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800215a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800215e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e004      	b.n	8002174 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800216a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_ADC_ConfigChannel+0x14a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	e018      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x17c>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80021b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f9ff 	bl	80015d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f9e3 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1ba>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f9d8 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	e01e      	b.n	800223c <HAL_ADC_ConfigChannel+0x1f8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f9cd 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800221c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e004      	b.n	800223a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x210>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	e018      	b.n	8002286 <HAL_ADC_ConfigChannel+0x242>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002268:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800226c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e004      	b.n	8002286 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800227c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	429a      	cmp	r2, r3
 8002288:	d106      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f99c 	bl	80015d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f980 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x280>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2102      	movs	r1, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f975 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 021f 	and.w	r2, r3, #31
 80022c2:	e01e      	b.n	8002302 <HAL_ADC_ConfigChannel+0x2be>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f96a 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80022e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80022ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e004      	b.n	8002300 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80022f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_ADC_ConfigChannel+0x2d6>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	e016      	b.n	8002348 <HAL_ADC_ConfigChannel+0x304>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800232c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800232e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e004      	b.n	8002348 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800233e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2102      	movs	r1, #2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f93b 	bl	80015d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2103      	movs	r1, #3
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f91f 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x342>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2103      	movs	r1, #3
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f914 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	e017      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x372>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2103      	movs	r1, #3
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f909 	bl	80015a4 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800239e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e003      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80023ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x38a>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	e011      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x3ae>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80023e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80023ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	2103      	movs	r1, #3
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f8e6 	bl	80015d0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fa21 	bl	8001850 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 81c2 	bne.w	800279a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f7ff f97a 	bl	800171c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a8e      	ldr	r2, [pc, #568]	; (8002668 <HAL_ADC_ConfigChannel+0x624>)
 800242e:	4293      	cmp	r3, r2
 8002430:	f040 8130 	bne.w	8002694 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_ADC_ConfigChannel+0x418>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2b09      	cmp	r3, #9
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e019      	b.n	8002490 <HAL_ADC_ConfigChannel+0x44c>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800246a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800246c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800246e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e003      	b.n	8002480 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2b09      	cmp	r3, #9
 8002488:	bf94      	ite	ls
 800248a:	2301      	movls	r3, #1
 800248c:	2300      	movhi	r3, #0
 800248e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002490:	2b00      	cmp	r3, #0
 8002492:	d079      	beq.n	8002588 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x46c>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	e015      	b.n	80024dc <HAL_ADC_ConfigChannel+0x498>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x4b8>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	e017      	b.n	800252c <HAL_ADC_ConfigChannel+0x4e8>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800250a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800250e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x50e>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	051b      	lsls	r3, r3, #20
 8002550:	e018      	b.n	8002584 <HAL_ADC_ConfigChannel+0x540>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e003      	b.n	8002576 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002584:	430b      	orrs	r3, r1
 8002586:	e080      	b.n	800268a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x560>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	069b      	lsls	r3, r3, #26
 800259e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a2:	e015      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x58c>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x5ac>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	e017      	b.n	8002620 <HAL_ADC_ConfigChannel+0x5dc>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	61fb      	str	r3, [r7, #28]
  return result;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	ea42 0103 	orr.w	r1, r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_ADC_ConfigChannel+0x608>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	3301      	adds	r3, #1
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	3b1e      	subs	r3, #30
 8002644:	051b      	lsls	r3, r3, #20
 8002646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800264a:	e01d      	b.n	8002688 <HAL_ADC_ConfigChannel+0x644>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	613b      	str	r3, [r7, #16]
  return result;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e005      	b.n	8002674 <HAL_ADC_ConfigChannel+0x630>
 8002668:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f003 021f 	and.w	r2, r3, #31
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	3b1e      	subs	r3, #30
 8002682:	051b      	lsls	r3, r3, #20
 8002684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002688:	430b      	orrs	r3, r1
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	4619      	mov	r1, r3
 8002690:	f7ff f819 	bl	80016c6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_ADC_ConfigChannel+0x76c>)
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d07c      	beq.n	800279a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a0:	4844      	ldr	r0, [pc, #272]	; (80027b4 <HAL_ADC_ConfigChannel+0x770>)
 80026a2:	f7fe ff4d 	bl	8001540 <LL_ADC_GetCommonPathInternalCh>
 80026a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026aa:	4843      	ldr	r0, [pc, #268]	; (80027b8 <HAL_ADC_ConfigChannel+0x774>)
 80026ac:	f7ff f8d0 	bl	8001850 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d15e      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a40      	ldr	r2, [pc, #256]	; (80027bc <HAL_ADC_ConfigChannel+0x778>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d127      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x6cc>
 80026c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d121      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a39      	ldr	r2, [pc, #228]	; (80027b8 <HAL_ADC_ConfigChannel+0x774>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d161      	bne.n	800279a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026de:	4619      	mov	r1, r3
 80026e0:	4834      	ldr	r0, [pc, #208]	; (80027b4 <HAL_ADC_ConfigChannel+0x770>)
 80026e2:	f7fe ff1a 	bl	800151a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026e6:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_ADC_ConfigChannel+0x77c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_ADC_ConfigChannel+0x780>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002700:	e002      	b.n	8002708 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b01      	subs	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f9      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800270e:	e044      	b.n	800279a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <HAL_ADC_ConfigChannel+0x784>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d113      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x6fe>
 800271a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800271e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_ADC_ConfigChannel+0x774>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d134      	bne.n	800279a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002738:	4619      	mov	r1, r3
 800273a:	481e      	ldr	r0, [pc, #120]	; (80027b4 <HAL_ADC_ConfigChannel+0x770>)
 800273c:	f7fe feed 	bl	800151a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002740:	e02b      	b.n	800279a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_ADC_ConfigChannel+0x788>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d126      	bne.n	800279a <HAL_ADC_ConfigChannel+0x756>
 800274c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d120      	bne.n	800279a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_ADC_ConfigChannel+0x774>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d11b      	bne.n	800279a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800276a:	4619      	mov	r1, r3
 800276c:	4811      	ldr	r0, [pc, #68]	; (80027b4 <HAL_ADC_ConfigChannel+0x770>)
 800276e:	f7fe fed4 	bl	800151a <LL_ADC_SetCommonPathInternalCh>
 8002772:	e012      	b.n	800279a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002786:	e008      	b.n	800279a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80027a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	37d8      	adds	r7, #216	; 0xd8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	80080000 	.word	0x80080000
 80027b4:	50040300 	.word	0x50040300
 80027b8:	50040000 	.word	0x50040000
 80027bc:	c7520000 	.word	0xc7520000
 80027c0:	20000010 	.word	0x20000010
 80027c4:	053e2d63 	.word	0x053e2d63
 80027c8:	cb840000 	.word	0xcb840000
 80027cc:	80000001 	.word	0x80000001

080027d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f835 	bl	8001850 <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d15e      	bne.n	80028aa <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <ADC_Enable+0xe4>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e04a      	b.n	80028ac <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fff0 	bl	8001800 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002820:	4825      	ldr	r0, [pc, #148]	; (80028b8 <ADC_Enable+0xe8>)
 8002822:	f7fe fe8d 	bl	8001540 <LL_ADC_GetCommonPathInternalCh>
 8002826:	4603      	mov	r3, r0
 8002828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <ADC_Enable+0xec>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <ADC_Enable+0xf0>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	3301      	adds	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002842:	e002      	b.n	800284a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	3b01      	subs	r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f9      	bne.n	8002844 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002850:	f7fe fe14 	bl	800147c <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002856:	e021      	b.n	800289c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fff7 	bl	8001850 <LL_ADC_IsEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe ffc7 	bl	8001800 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002872:	f7fe fe03 	bl	800147c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d90d      	bls.n	800289c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0210 	orr.w	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e007      	b.n	80028ac <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d1d6      	bne.n	8002858 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	8000003f 	.word	0x8000003f
 80028b8:	50040300 	.word	0x50040300
 80028bc:	20000010 	.word	0x20000010
 80028c0:	053e2d63 	.word	0x053e2d63

080028c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe ffd0 	bl	8001876 <LL_ADC_IsDisableOngoing>
 80028d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe ffb7 	bl	8001850 <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d047      	beq.n	8002978 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d144      	bne.n	8002978 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030d 	and.w	r3, r3, #13
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10c      	bne.n	8002916 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe ff91 	bl	8001828 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2203      	movs	r2, #3
 800290c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800290e:	f7fe fdb5 	bl	800147c <HAL_GetTick>
 8002912:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002914:	e029      	b.n	800296a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0210 	orr.w	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e023      	b.n	800297a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002932:	f7fe fda3 	bl	800147c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d914      	bls.n	800296a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e007      	b.n	800297a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1dc      	bne.n	8002932 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002998:	2b00      	cmp	r3, #0
 800299a:	d14b      	bne.n	8002a34 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d021      	beq.n	80029fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fe23 	bl	8001606 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d032      	beq.n	8002a2c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12b      	bne.n	8002a2c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11f      	bne.n	8002a2c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
 80029f8:	e018      	b.n	8002a2c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7fe fadd 	bl	8000fec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a32:	e00e      	b.n	8002a52 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff faf5 	bl	8002030 <HAL_ADC_ErrorCallback>
}
 8002a46:	e004      	b.n	8002a52 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7fe f9d9 	bl	8000e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fac7 	bl	8002030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <LL_ADC_StartCalibration>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_IsCalibrationOnGoing>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADCEx_Calibration_Start+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e04d      	b.n	8002bbc <HAL_ADCEx_Calibration_Start+0xb8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fecb 	bl	80028c4 <ADC_Disable>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d136      	bne.n	8002ba6 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b40:	f023 0302 	bic.w	r3, r3, #2
 8002b44:	f043 0202 	orr.w	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ffa9 	bl	8002aaa <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b58:	e014      	b.n	8002b84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d90d      	bls.n	8002b84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f023 0312 	bic.w	r3, r3, #18
 8002b70:	f043 0210 	orr.w	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01b      	b.n	8002bbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ffa7 	bl	8002adc <LL_ADC_IsCalibrationOnGoing>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e2      	bne.n	8002b5a <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f023 0303 	bic.w	r3, r3, #3
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ba4:	e005      	b.n	8002bb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	00026aaa 	.word	0x00026aaa

08002bc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff40 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff90 	bl	8002d20 <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5f 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff33 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa4 	bl	8002d88 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e08e      	b.n	8002f7c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_DMA_Init+0x138>)
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d80f      	bhi.n	8002e8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <HAL_DMA_Init+0x13c>)
 8002e72:	4413      	add	r3, r2
 8002e74:	4a45      	ldr	r2, [pc, #276]	; (8002f8c <HAL_DMA_Init+0x140>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	009a      	lsls	r2, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a42      	ldr	r2, [pc, #264]	; (8002f90 <HAL_DMA_Init+0x144>)
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
 8002e88:	e00e      	b.n	8002ea8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <HAL_DMA_Init+0x148>)
 8002e92:	4413      	add	r3, r2
 8002e94:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <HAL_DMA_Init+0x140>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a3c      	ldr	r2, [pc, #240]	; (8002f98 <HAL_DMA_Init+0x14c>)
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9b6 	bl	800326c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f08:	d102      	bne.n	8002f10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <HAL_DMA_Init+0x106>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d80c      	bhi.n	8002f52 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f9d5 	bl	80032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	e008      	b.n	8002f64 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40020407 	.word	0x40020407
 8002f88:	bffdfff8 	.word	0xbffdfff8
 8002f8c:	cccccccd 	.word	0xcccccccd
 8002f90:	40020000 	.word	0x40020000
 8002f94:	bffdfbf8 	.word	0xbffdfbf8
 8002f98:	40020400 	.word	0x40020400

08002f9c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA_Start_IT+0x20>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e066      	b.n	800308a <HAL_DMA_Start_IT+0xee>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d155      	bne.n	800307c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f8fb 	bl	80031f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 020e 	orr.w	r2, r2, #14
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e00f      	b.n	8003034 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 020a 	orr.w	r2, r2, #10
 8003032:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003068:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e005      	b.n	8003088 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003088:	7dfb      	ldrb	r3, [r7, #23]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 031c 	and.w	r3, r3, #28
 80030b2:	2204      	movs	r2, #4
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d026      	beq.n	800310c <HAL_DMA_IRQHandler+0x7a>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d021      	beq.n	800310c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0204 	bic.w	r2, r2, #4
 80030e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 021c 	and.w	r2, r3, #28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2104      	movs	r1, #4
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d071      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800310a:	e06c      	b.n	80031e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f003 031c 	and.w	r3, r3, #28
 8003114:	2202      	movs	r2, #2
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02e      	beq.n	800317e <HAL_DMA_IRQHandler+0xec>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d029      	beq.n	800317e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020a 	bic.w	r2, r2, #10
 8003146:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 021c 	and.w	r2, r3, #28
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2102      	movs	r1, #2
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d038      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800317c:	e033      	b.n	80031e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 031c 	and.w	r3, r3, #28
 8003186:	2208      	movs	r2, #8
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02a      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x156>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d025      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 020e 	bic.w	r2, r2, #14
 80031aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f003 021c 	and.w	r2, r3, #28
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
}
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003206:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003218:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f003 021c 	and.w	r2, r3, #28
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b10      	cmp	r3, #16
 800323c:	d108      	bne.n	8003250 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800324e:	e007      	b.n	8003260 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800327c:	429a      	cmp	r2, r3
 800327e:	d80a      	bhi.n	8003296 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800328c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6493      	str	r3, [r2, #72]	; 0x48
 8003294:	e007      	b.n	80032a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	009a      	lsls	r2, r3, #2
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032a0:	4413      	add	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3b08      	subs	r3, #8
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40020407 	.word	0x40020407
 80032dc:	4002081c 	.word	0x4002081c
 80032e0:	cccccccd 	.word	0xcccccccd
 80032e4:	40020880 	.word	0x40020880

080032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800330c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3b01      	subs	r3, #1
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2201      	movs	r2, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	1000823f 	.word	0x1000823f
 8003330:	40020940 	.word	0x40020940

08003334 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003342:	e14c      	b.n	80035de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 813e 	beq.w	80035d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d005      	beq.n	8003374 <HAL_GPIO_Init+0x40>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d130      	bne.n	80033d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033aa:	2201      	movs	r2, #1
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0201 	and.w	r2, r3, #1
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d017      	beq.n	8003412 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d123      	bne.n	8003466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	220f      	movs	r2, #15
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	6939      	ldr	r1, [r7, #16]
 8003462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8098 	beq.w	80035d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_GPIO_Init+0x2c8>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	220f      	movs	r2, #15
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034d2:	d019      	beq.n	8003508 <HAL_GPIO_Init+0x1d4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_GPIO_Init+0x2cc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <HAL_GPIO_Init+0x1d0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a49      	ldr	r2, [pc, #292]	; (8003604 <HAL_GPIO_Init+0x2d0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00d      	beq.n	8003500 <HAL_GPIO_Init+0x1cc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a48      	ldr	r2, [pc, #288]	; (8003608 <HAL_GPIO_Init+0x2d4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <HAL_GPIO_Init+0x1c8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a47      	ldr	r2, [pc, #284]	; (800360c <HAL_GPIO_Init+0x2d8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_GPIO_Init+0x1c4>
 80034f4:	2304      	movs	r3, #4
 80034f6:	e008      	b.n	800350a <HAL_GPIO_Init+0x1d6>
 80034f8:	2307      	movs	r3, #7
 80034fa:	e006      	b.n	800350a <HAL_GPIO_Init+0x1d6>
 80034fc:	2303      	movs	r3, #3
 80034fe:	e004      	b.n	800350a <HAL_GPIO_Init+0x1d6>
 8003500:	2302      	movs	r3, #2
 8003502:	e002      	b.n	800350a <HAL_GPIO_Init+0x1d6>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_GPIO_Init+0x1d6>
 8003508:	2300      	movs	r3, #0
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	f002 0203 	and.w	r2, r2, #3
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	4093      	lsls	r3, r2
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800351a:	4938      	ldr	r1, [pc, #224]	; (80035fc <HAL_GPIO_Init+0x2c8>)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003528:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800354c:	4a30      	ldr	r2, [pc, #192]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003552:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003576:	4a26      	ldr	r2, [pc, #152]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800357c:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035a2:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3301      	adds	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f47f aeab 	bne.w	8003344 <HAL_GPIO_Init+0x10>
  }
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40010000 	.word	0x40010000
 8003600:	48000400 	.word	0x48000400
 8003604:	48000800 	.word	0x48000800
 8003608:	48000c00 	.word	0x48000c00
 800360c:	48001000 	.word	0x48001000
 8003610:	58000800 	.word	0x58000800

08003614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 8003620:	4613      	mov	r3, r2
 8003622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003630:	e002      	b.n	8003638 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	58000400 	.word	0x58000400

08003664 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_PWREx_GetVoltageRange+0x18>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	58000400 	.word	0x58000400

08003680 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003692:	d101      	bne.n	8003698 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f2:	d101      	bne.n	80036f8 <LL_RCC_HSE_IsReady+0x18>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <LL_RCC_HSE_IsReady+0x1a>
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003752:	d101      	bne.n	8003758 <LL_RCC_HSI_IsReady+0x18>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <LL_RCC_HSI_IsReady+0x1a>
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800379a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d101      	bne.n	80037ea <LL_RCC_HSI48_IsReady+0x18>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <LL_RCC_HSI48_IsReady+0x1a>
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d101      	bne.n	8003896 <LL_RCC_LSE_IsReady+0x18>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <LL_RCC_LSE_IsReady+0x1a>
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d101      	bne.n	80038fe <LL_RCC_LSI1_IsReady+0x18>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_RCC_LSI1_IsReady+0x1a>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b08      	cmp	r3, #8
 8003960:	d101      	bne.n	8003966 <LL_RCC_LSI2_IsReady+0x18>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_RCC_LSI2_IsReady+0x1a>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800397a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003982:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	6013      	str	r3, [r2, #0]
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d101      	bne.n	80039f2 <LL_RCC_MSI_IsReady+0x16>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <LL_RCC_MSI_IsReady+0x18>
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2bb0      	cmp	r3, #176	; 0xb0
 8003a3c:	d901      	bls.n	8003a42 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003a3e:	23b0      	movs	r3, #176	; 0xb0
 8003a40:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003a42:	687b      	ldr	r3, [r7, #4]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 0203 	bic.w	r2, r3, #3
 8003a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b1e:	f023 020f 	bic.w	r2, r3, #15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c0e:	d101      	bne.n	8003c14 <LL_RCC_PLL_IsReady+0x18>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <LL_RCC_PLL_IsReady+0x1a>
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0303 	and.w	r3, r3, #3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d101      	bne.n	8003c9a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cba:	d101      	bne.n	8003cc0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d101      	bne.n	8003ce6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d04:	d101      	bne.n	8003d0a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d28:	d101      	bne.n	8003d2e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b08d      	sub	sp, #52	; 0x34
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e363      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 808d 	beq.w	8003e76 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5c:	f7ff fea1 	bl	8003aa2 <LL_RCC_GetSysClkSource>
 8003d60:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d62:	f7ff ff82 	bl	8003c6a <LL_RCC_PLL_GetMainSource>
 8003d66:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x3e>
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d147      	bne.n	8003e04 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d144      	bne.n	8003e04 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e347      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d8a:	f7ff fe4c 	bl	8003a26 <LL_RCC_MSI_GetRange>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	429c      	cmp	r4, r3
 8003d92:	d914      	bls.n	8003dbe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fd05 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e336      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fe26 	bl	80039fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fe4a 	bl	8003a50 <LL_RCC_MSI_SetCalibTrimming>
 8003dbc:	e013      	b.n	8003de6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fe1b 	bl	80039fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fe3f 	bl	8003a50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fce6 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e317      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003de6:	f000 fccb 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4aa4      	ldr	r2, [pc, #656]	; (8004080 <HAL_RCC_OscConfig+0x344>)
 8003dee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003df0:	4ba4      	ldr	r3, [pc, #656]	; (8004084 <HAL_RCC_OscConfig+0x348>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fd faf3 	bl	80013e0 <HAL_InitTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d039      	beq.n	8003e74 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e308      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01e      	beq.n	8003e4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e0c:	f7ff fdc8 	bl	80039a0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e10:	f7fd fb34 	bl	800147c <HAL_GetTick>
 8003e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e18:	f7fd fb30 	bl	800147c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e2f5      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e2a:	f7ff fdd7 	bl	80039dc <LL_RCC_MSI_IsReady>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f1      	beq.n	8003e18 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fde0 	bl	80039fe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fe04 	bl	8003a50 <LL_RCC_MSI_SetCalibTrimming>
 8003e48:	e015      	b.n	8003e76 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e4a:	f7ff fdb8 	bl	80039be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fb15 	bl	800147c <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e56:	f7fd fb11 	bl	800147c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e2d6      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e68:	f7ff fdb8 	bl	80039dc <LL_RCC_MSI_IsReady>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f1      	bne.n	8003e56 <HAL_RCC_OscConfig+0x11a>
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e74:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d047      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	f7ff fe0e 	bl	8003aa2 <LL_RCC_GetSysClkSource>
 8003e86:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	f7ff feef 	bl	8003c6a <LL_RCC_PLL_GetMainSource>
 8003e8c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x164>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d108      	bne.n	8003eac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d134      	bne.n	8003f12 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e2b4      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_OscConfig+0x180>
 8003eb6:	f7ff fbf5 	bl	80036a4 <LL_RCC_HSE_Enable>
 8003eba:	e001      	b.n	8003ec0 <HAL_RCC_OscConfig+0x184>
 8003ebc:	f7ff fc01 	bl	80036c2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d012      	beq.n	8003eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fad8 	bl	800147c <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fad4 	bl	800147c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e299      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ee2:	f7ff fbfd 	bl	80036e0 <LL_RCC_HSE_IsReady>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f1      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x194>
 8003eec:	e011      	b.n	8003f12 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd fac5 	bl	800147c <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef6:	f7fd fac1 	bl	800147c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e286      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f08:	f7ff fbea 	bl	80036e0 <LL_RCC_HSE_IsReady>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f1      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d04c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1e:	f7ff fdc0 	bl	8003aa2 <LL_RCC_GetSysClkSource>
 8003f22:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f24:	f7ff fea1 	bl	8003c6a <LL_RCC_PLL_GetMainSource>
 8003f28:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_OscConfig+0x200>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d10e      	bne.n	8003f54 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e266      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fc09 	bl	8003764 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f52:	e031      	b.n	8003fb8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d019      	beq.n	8003f90 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	f7ff fbd2 	bl	8003704 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd fa8c 	bl	800147c <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f68:	f7fd fa88 	bl	800147c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e24d      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f7a:	f7ff fbe1 	bl	8003740 <LL_RCC_HSI_IsReady>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f1      	beq.n	8003f68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fbeb 	bl	8003764 <LL_RCC_HSI_SetCalibTrimming>
 8003f8e:	e013      	b.n	8003fb8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f90:	f7ff fbc7 	bl	8003722 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fa72 	bl	800147c <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fa6e 	bl	800147c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e233      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fae:	f7ff fbc7 	bl	8003740 <LL_RCC_HSI_IsReady>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f1      	bne.n	8003f9c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a3 	beq.w	8004118 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d076      	beq.n	80040c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d046      	beq.n	8004074 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003fe6:	f7ff fc7e 	bl	80038e6 <LL_RCC_LSI1_IsReady>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d113      	bne.n	8004018 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003ff0:	f7ff fc57 	bl	80038a2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ff4:	f7fd fa42 	bl	800147c <HAL_GetTick>
 8003ff8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ffc:	f7fd fa3e 	bl	800147c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e203      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800400e:	f7ff fc6a 	bl	80038e6 <LL_RCC_LSI1_IsReady>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f1      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004018:	f7ff fc77 	bl	800390a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fa2e 	bl	800147c <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004024:	f7fd fa2a 	bl	800147c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b03      	cmp	r3, #3
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1ef      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004036:	f7ff fc8a 	bl	800394e <LL_RCC_LSI2_IsReady>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f1      	beq.n	8004024 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fc94 	bl	8003972 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800404a:	f7ff fc3b 	bl	80038c4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fd fa15 	bl	800147c <HAL_GetTick>
 8004052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004056:	f7fd fa11 	bl	800147c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1d6      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004068:	f7ff fc3d 	bl	80038e6 <LL_RCC_LSI1_IsReady>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f1      	bne.n	8004056 <HAL_RCC_OscConfig+0x31a>
 8004072:	e051      	b.n	8004118 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004074:	f7ff fc15 	bl	80038a2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fa00 	bl	800147c <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800407e:	e00c      	b.n	800409a <HAL_RCC_OscConfig+0x35e>
 8004080:	20000010 	.word	0x20000010
 8004084:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004088:	f7fd f9f8 	bl	800147c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e1bd      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800409a:	f7ff fc24 	bl	80038e6 <LL_RCC_LSI1_IsReady>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f1      	beq.n	8004088 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80040a4:	f7ff fc42 	bl	800392c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040aa:	f7fd f9e7 	bl	800147c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1ac      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80040bc:	f7ff fc47 	bl	800394e <LL_RCC_LSI2_IsReady>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f1      	bne.n	80040aa <HAL_RCC_OscConfig+0x36e>
 80040c6:	e027      	b.n	8004118 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80040c8:	f7ff fc30 	bl	800392c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd f9d6 	bl	800147c <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040d4:	f7fd f9d2 	bl	800147c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e197      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040e6:	f7ff fc32 	bl	800394e <LL_RCC_LSI2_IsReady>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f1      	bne.n	80040d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80040f0:	f7ff fbe8 	bl	80038c4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd f9c2 	bl	800147c <HAL_GetTick>
 80040f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040fc:	f7fd f9be 	bl	800147c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e183      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800410e:	f7ff fbea 	bl	80038e6 <LL_RCC_LSI1_IsReady>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f1      	bne.n	80040fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05b      	beq.n	80041dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004124:	4ba7      	ldr	r3, [pc, #668]	; (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d114      	bne.n	800415a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004130:	f7ff fa88 	bl	8003644 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004134:	f7fd f9a2 	bl	800147c <HAL_GetTick>
 8004138:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413c:	f7fd f99e 	bl	800147c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e163      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800414e:	4b9d      	ldr	r3, [pc, #628]	; (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d102      	bne.n	8004168 <HAL_RCC_OscConfig+0x42c>
 8004162:	f7ff fb48 	bl	80037f6 <LL_RCC_LSE_Enable>
 8004166:	e00c      	b.n	8004182 <HAL_RCC_OscConfig+0x446>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d104      	bne.n	800417a <HAL_RCC_OscConfig+0x43e>
 8004170:	f7ff fb63 	bl	800383a <LL_RCC_LSE_EnableBypass>
 8004174:	f7ff fb3f 	bl	80037f6 <LL_RCC_LSE_Enable>
 8004178:	e003      	b.n	8004182 <HAL_RCC_OscConfig+0x446>
 800417a:	f7ff fb4d 	bl	8003818 <LL_RCC_LSE_Disable>
 800417e:	f7ff fb6d 	bl	800385c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d014      	beq.n	80041b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fd f977 	bl	800147c <HAL_GetTick>
 800418e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004192:	f7fd f973 	bl	800147c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e136      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80041a8:	f7ff fb69 	bl	800387e <LL_RCC_LSE_IsReady>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ef      	beq.n	8004192 <HAL_RCC_OscConfig+0x456>
 80041b2:	e013      	b.n	80041dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd f962 	bl	800147c <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd f95e 	bl	800147c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e121      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80041d2:	f7ff fb54 	bl	800387e <LL_RCC_LSE_IsReady>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ef      	bne.n	80041bc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02c      	beq.n	8004242 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041f0:	f7ff facd 	bl	800378e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fd f942 	bl	800147c <HAL_GetTick>
 80041f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fc:	f7fd f93e 	bl	800147c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e103      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800420e:	f7ff fae0 	bl	80037d2 <LL_RCC_HSI48_IsReady>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f1      	beq.n	80041fc <HAL_RCC_OscConfig+0x4c0>
 8004218:	e013      	b.n	8004242 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800421a:	f7ff fac9 	bl	80037b0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd f92d 	bl	800147c <HAL_GetTick>
 8004222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004226:	f7fd f929 	bl	800147c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0ee      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004238:	f7ff facb 	bl	80037d2 <LL_RCC_HSI48_IsReady>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f1      	bne.n	8004226 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80e4 	beq.w	8004414 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800424c:	f7ff fc29 	bl	8003aa2 <LL_RCC_GetSysClkSource>
 8004250:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	2b02      	cmp	r3, #2
 8004260:	f040 80b4 	bne.w	80043cc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0203 	and.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	429a      	cmp	r2, r3
 8004270:	d123      	bne.n	80042ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d11c      	bne.n	80042ba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d114      	bne.n	80042ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d10d      	bne.n	80042ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d05d      	beq.n	8004376 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d058      	beq.n	8004372 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0a1      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042d2:	f7ff fc84 	bl	8003bde <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d6:	f7fd f8d1 	bl	800147c <HAL_GetTick>
 80042da:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042de:	f7fd f8cd 	bl	800147c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e092      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ef      	bne.n	80042de <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_OscConfig+0x68c>)
 8004306:	4013      	ands	r3, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004316:	0212      	lsls	r2, r2, #8
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800431e:	4311      	orrs	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004324:	4311      	orrs	r1, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800432a:	430a      	orrs	r2, r1
 800432c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004330:	4313      	orrs	r3, r2
 8004332:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004334:	f7ff fc44 	bl	8003bc0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004348:	f7fd f898 	bl	800147c <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fd f894 	bl	800147c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e059      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ef      	beq.n	8004350 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004370:	e050      	b.n	8004414 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e04f      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d147      	bne.n	8004414 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004384:	f7ff fc1c 	bl	8003bc0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004398:	f7fd f870 	bl	800147c <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd f86c 	bl	800147c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e031      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ef      	beq.n	80043a0 <HAL_RCC_OscConfig+0x664>
 80043c0:	e028      	b.n	8004414 <HAL_RCC_OscConfig+0x6d8>
 80043c2:	bf00      	nop
 80043c4:	58000400 	.word	0x58000400
 80043c8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d01e      	beq.n	8004410 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	f7ff fc04 	bl	8003bde <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd f851 	bl	800147c <HAL_GetTick>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043de:	f7fd f84d 	bl	800147c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e012      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ef      	bne.n	80043de <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_OscConfig+0x6e4>)
 800440a:	4013      	ands	r3, r2
 800440c:	60cb      	str	r3, [r1, #12]
 800440e:	e001      	b.n	8004414 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3734      	adds	r7, #52	; 0x34
 800441a:	46bd      	mov	sp, r7
 800441c:	bd90      	pop	{r4, r7, pc}
 800441e:	bf00      	nop
 8004420:	eefefffc 	.word	0xeefefffc

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e12d      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004438:	4b98      	ldr	r3, [pc, #608]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d91b      	bls.n	800447e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b95      	ldr	r3, [pc, #596]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 0207 	bic.w	r2, r3, #7
 800444e:	4993      	ldr	r1, [pc, #588]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fd f811 	bl	800147c <HAL_GetTick>
 800445a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445c:	e008      	b.n	8004470 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800445e:	f7fd f80d 	bl	800147c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e111      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004470:	4b8a      	ldr	r3, [pc, #552]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d1ef      	bne.n	800445e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fb13 	bl	8003aba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004494:	f7fc fff2 	bl	800147c <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800449c:	f7fc ffee 	bl	800147c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0f2      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80044ae:	f7ff fbe8 	bl	8003c82 <LL_RCC_IsActiveFlag_HPRE>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f1      	beq.n	800449c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d016      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fb0a 	bl	8003ae2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044ce:	f7fc ffd5 	bl	800147c <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044d6:	f7fc ffd1 	bl	800147c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0d5      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044e8:	f7ff fbdd 	bl	8003ca6 <LL_RCC_IsActiveFlag_C2HPRE>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f1      	beq.n	80044d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fb03 	bl	8003b0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004508:	f7fc ffb8 	bl	800147c <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004510:	f7fc ffb4 	bl	800147c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0b8      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004522:	f7ff fbd3 	bl	8003ccc <LL_RCC_IsActiveFlag_SHDHPRE>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f1      	beq.n	8004510 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d016      	beq.n	8004566 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fafd 	bl	8003b3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004542:	f7fc ff9b 	bl	800147c <HAL_GetTick>
 8004546:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800454a:	f7fc ff97 	bl	800147c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e09b      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800455c:	f7ff fbc9 	bl	8003cf2 <LL_RCC_IsActiveFlag_PPRE1>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f1      	beq.n	800454a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d017      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff faf3 	bl	8003b64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800457e:	f7fc ff7d 	bl	800147c <HAL_GetTick>
 8004582:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004586:	f7fc ff79 	bl	800147c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e07d      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004598:	f7ff fbbd 	bl	8003d16 <LL_RCC_IsActiveFlag_PPRE2>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f1      	beq.n	8004586 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d043      	beq.n	8004636 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80045b6:	f7ff f893 	bl	80036e0 <LL_RCC_HSE_IsReady>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11e      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e067      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d106      	bne.n	80045da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80045cc:	f7ff fb16 	bl	8003bfc <LL_RCC_PLL_IsReady>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d113      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e05c      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80045e2:	f7ff f9fb 	bl	80039dc <LL_RCC_MSI_IsReady>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d108      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e051      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80045f0:	f7ff f8a6 	bl	8003740 <LL_RCC_HSI_IsReady>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e04a      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fa39 	bl	8003a7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004608:	f7fc ff38 	bl	800147c <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460e:	e00a      	b.n	8004626 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004610:	f7fc ff34 	bl	800147c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	; 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e036      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	f7ff fa3c 	bl	8003aa2 <LL_RCC_GetSysClkSource>
 800462a:	4602      	mov	r2, r0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	429a      	cmp	r2, r3
 8004634:	d1ec      	bne.n	8004610 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004636:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d21b      	bcs.n	800467c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 0207 	bic.w	r2, r3, #7
 800464c:	4913      	ldr	r1, [pc, #76]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fc ff12 	bl	800147c <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	e008      	b.n	800466e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800465c:	f7fc ff0e 	bl	800147c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e012      	b.n	8004694 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d1ef      	bne.n	800465c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800467c:	f000 f880 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8004680:	4603      	mov	r3, r0
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 8004684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004686:	f7fc ff05 	bl	8001494 <HAL_GetTickPrio>
 800468a:	4603      	mov	r3, r0
 800468c:	4618      	mov	r0, r3
 800468e:	f7fc fea7 	bl	80013e0 <HAL_InitTick>
 8004692:	4603      	mov	r3, r0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	58004000 	.word	0x58004000
 80046a0:	20000010 	.word	0x20000010

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046aa:	f7ff f9fa 	bl	8003aa2 <LL_RCC_GetSysClkSource>
 80046ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046b6:	f7ff f9b6 	bl	8003a26 <LL_RCC_MSI_GetRange>
 80046ba:	4603      	mov	r3, r0
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e04b      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d102      	bne.n	80046d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e045      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d10a      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046de:	f7fe ffcf 	bl	8003680 <LL_RCC_HSE_IsEnabledDiv2>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d102      	bne.n	80046ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046e8:	4b23      	ldr	r3, [pc, #140]	; (8004778 <HAL_RCC_GetSysClockFreq+0xd4>)
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e03a      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80046ee:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_RCC_GetSysClockFreq+0xd8>)
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e037      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80046f4:	f7ff fab9 	bl	8003c6a <LL_RCC_PLL_GetMainSource>
 80046f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d003      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x64>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d003      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x6a>
 8004706:	e00d      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_RCC_GetSysClockFreq+0xd0>)
 800470a:	60bb      	str	r3, [r7, #8]
        break;
 800470c:	e015      	b.n	800473a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800470e:	f7fe ffb7 	bl	8003680 <LL_RCC_HSE_IsEnabledDiv2>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d102      	bne.n	800471e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RCC_GetSysClockFreq+0xd4>)
 800471a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800471c:	e00d      	b.n	800473a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004720:	60bb      	str	r3, [r7, #8]
        break;
 8004722:	e00a      	b.n	800473a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004724:	f7ff f97f 	bl	8003a26 <LL_RCC_MSI_GetRange>
 8004728:	4603      	mov	r3, r0
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004736:	60bb      	str	r3, [r7, #8]
        break;
 8004738:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800473a:	f7ff fa71 	bl	8003c20 <LL_RCC_PLL_GetN>
 800473e:	4602      	mov	r2, r0
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	fb03 f402 	mul.w	r4, r3, r2
 8004746:	f7ff fa84 	bl	8003c52 <LL_RCC_PLL_GetDivider>
 800474a:	4603      	mov	r3, r0
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	3301      	adds	r3, #1
 8004750:	fbb4 f4f3 	udiv	r4, r4, r3
 8004754:	f7ff fa71 	bl	8003c3a <LL_RCC_PLL_GetR>
 8004758:	4603      	mov	r3, r0
 800475a:	0f5b      	lsrs	r3, r3, #29
 800475c:	3301      	adds	r3, #1
 800475e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004762:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}
 800476e:	bf00      	nop
 8004770:	0800611c 	.word	0x0800611c
 8004774:	00f42400 	.word	0x00f42400
 8004778:	003d0900 	.word	0x003d0900
 800477c:	007a1200 	.word	0x007a1200

08004780 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b598      	push	{r3, r4, r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004784:	f7ff ff8e 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004788:	4604      	mov	r4, r0
 800478a:	f7ff f9ff 	bl	8003b8c <LL_RCC_GetAHBPrescaler>
 800478e:	4603      	mov	r3, r0
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	4a03      	ldr	r2, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd98      	pop	{r3, r4, r7, pc}
 80047a4:	080060dc 	.word	0x080060dc

080047a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2bb0      	cmp	r3, #176	; 0xb0
 80047b4:	d903      	bls.n	80047be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e007      	b.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	4a11      	ldr	r2, [pc, #68]	; (800480c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80047ce:	f7ff f9e9 	bl	8003ba4 <LL_RCC_GetAHB4Prescaler>
 80047d2:	4603      	mov	r3, r0
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	4a0d      	ldr	r2, [pc, #52]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	0c9c      	lsrs	r4, r3, #18
 80047f2:	f7fe ff37 	bl	8003664 <HAL_PWREx_GetVoltageRange>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4619      	mov	r1, r3
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f80c 	bl	8004818 <RCC_SetFlashLatency>
 8004800:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bd90      	pop	{r4, r7, pc}
 800480a:	bf00      	nop
 800480c:	0800611c 	.word	0x0800611c
 8004810:	080060dc 	.word	0x080060dc
 8004814:	431bde83 	.word	0x431bde83

08004818 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b093      	sub	sp, #76	; 0x4c
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004822:	4b37      	ldr	r3, [pc, #220]	; (8004900 <RCC_SetFlashLatency+0xe8>)
 8004824:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800482a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800482e:	4a35      	ldr	r2, [pc, #212]	; (8004904 <RCC_SetFlashLatency+0xec>)
 8004830:	f107 031c 	add.w	r3, r7, #28
 8004834:	ca07      	ldmia	r2, {r0, r1, r2}
 8004836:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <RCC_SetFlashLatency+0xf0>)
 800483c:	f107 040c 	add.w	r4, r7, #12
 8004840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004846:	2300      	movs	r3, #0
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004850:	d11a      	bne.n	8004888 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004852:	2300      	movs	r3, #0
 8004854:	643b      	str	r3, [r7, #64]	; 0x40
 8004856:	e013      	b.n	8004880 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	443b      	add	r3, r7
 8004860:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d807      	bhi.n	800487a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800486a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3348      	adds	r3, #72	; 0x48
 8004870:	443b      	add	r3, r7
 8004872:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004876:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004878:	e020      	b.n	80048bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800487a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800487c:	3301      	adds	r3, #1
 800487e:	643b      	str	r3, [r7, #64]	; 0x40
 8004880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004882:	2b03      	cmp	r3, #3
 8004884:	d9e8      	bls.n	8004858 <RCC_SetFlashLatency+0x40>
 8004886:	e019      	b.n	80048bc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004888:	2300      	movs	r3, #0
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488c:	e013      	b.n	80048b6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800488e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	3348      	adds	r3, #72	; 0x48
 8004894:	443b      	add	r3, r7
 8004896:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d807      	bhi.n	80048b0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3348      	adds	r3, #72	; 0x48
 80048a6:	443b      	add	r3, r7
 80048a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048ae:	e005      	b.n	80048bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	3301      	adds	r3, #1
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d9e8      	bls.n	800488e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <RCC_SetFlashLatency+0xf4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 0207 	bic.w	r2, r3, #7
 80048c4:	4911      	ldr	r1, [pc, #68]	; (800490c <RCC_SetFlashLatency+0xf4>)
 80048c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048cc:	f7fc fdd6 	bl	800147c <HAL_GetTick>
 80048d0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048d2:	e008      	b.n	80048e6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048d4:	f7fc fdd2 	bl	800147c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e007      	b.n	80048f6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <RCC_SetFlashLatency+0xf4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1ef      	bne.n	80048d4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	374c      	adds	r7, #76	; 0x4c
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}
 80048fe:	bf00      	nop
 8004900:	080060b0 	.word	0x080060b0
 8004904:	080060c0 	.word	0x080060c0
 8004908:	080060cc 	.word	0x080060cc
 800490c:	58004000 	.word	0x58004000

08004910 <LL_RCC_LSE_IsEnabled>:
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <LL_RCC_LSE_IsEnabled+0x18>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <LL_RCC_LSE_IsEnabled+0x1a>
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_RCC_LSE_IsReady>:
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b02      	cmp	r3, #2
 8004946:	d101      	bne.n	800494c <LL_RCC_LSE_IsReady+0x18>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <LL_RCC_LSE_IsReady+0x1a>
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_RCC_SetRFWKPClockSource>:
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004968:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800496c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <LL_RCC_SetSMPSClockSource>:
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f023 0203 	bic.w	r2, r3, #3
 8004996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4313      	orrs	r3, r2
 800499e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_RCC_SetSMPSPrescaler>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_SetUSARTClockSource>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f023 0203 	bic.w	r2, r3, #3
 80049e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_RCC_SetLPUARTClockSource>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_RCC_SetI2CClockSource>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_RCC_SetLPTIMClockSource>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	401a      	ands	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_RCC_SetSAIClockSource>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_SetRNGClockSource>:
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <LL_RCC_SetCLK48ClockSource>:
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_SetUSBClockSource>:
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ffe3 	bl	8004af2 <LL_RCC_SetCLK48ClockSource>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <LL_RCC_SetADCClockSource>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_RCC_SetRTCClockSource>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_GetRTCClockSource>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_RCC_ForceBackupDomainReset>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_PLLSAI1_Enable>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bfc:	6013      	str	r3, [r2, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_RCC_PLLSAI1_Disable>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_PLLSAI1_IsReady>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c38:	d101      	bne.n	8004c3e <LL_RCC_PLLSAI1_IsReady+0x18>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c52:	2300      	movs	r3, #0
 8004c54:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c56:	2300      	movs	r3, #0
 8004c58:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d034      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c6e:	d021      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c74:	d81b      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c7a:	d01d      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c80:	d815      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8a:	d110      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c9c:	e00d      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f947 	bl	8004f36 <RCCEx_PLLSAI1_ConfigNP>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cac:	e005      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	77fb      	strb	r3, [r7, #31]
        break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	7ffb      	ldrb	r3, [r7, #31]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fee8 	bl	8004a9a <LL_RCC_SetSAIClockSource>
 8004cca:	e001      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7ffb      	ldrb	r3, [r7, #31]
 8004cce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d046      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004cdc:	f7ff ff56 	bl	8004b8c <LL_RCC_GetRTCClockSource>
 8004ce0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d03c      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004cec:	f7fe fcaa 	bl	8003644 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff30 	bl	8004b60 <LL_RCC_SetRTCClockSource>
 8004d00:	e02e      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d0c:	f7ff ff4b 	bl	8004ba6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d10:	f7ff ff5a 	bl	8004bc8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d2c:	f7ff fdf0 	bl	8004910 <LL_RCC_LSE_IsEnabled>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d114      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d36:	f7fc fba1 	bl	800147c <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d3c:	e00b      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fc fb9d 	bl	800147c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	77fb      	strb	r3, [r7, #31]
              break;
 8004d54:	e004      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d56:	f7ff fded 	bl	8004934 <LL_RCC_LSE_IsReady>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d1ee      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
 8004d62:	77bb      	strb	r3, [r7, #30]
 8004d64:	e001      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	7ffb      	ldrb	r3, [r7, #31]
 8004d68:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fe2a 	bl	80049d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fe35 	bl	8004a00 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fe5d 	bl	8004a66 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fe52 	bl	8004a66 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fe2a 	bl	8004a2c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fe1f 	bl	8004a2c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d022      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fe8d 	bl	8004b1e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f8dd 	bl	8004fec <RCCEx_PLLSAI1_ConfigNQ>
 8004e32:	4603      	mov	r3, r0
 8004e34:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004e3c:	7ffb      	ldrb	r3, [r7, #31]
 8004e3e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e54:	d008      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fe2a 	bl	8004ac6 <LL_RCC_SetRNGClockSource>
 8004e72:	e00a      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7ff fe21 	bl	8004ac6 <LL_RCC_SetRNGClockSource>
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff fe34 	bl	8004af2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d022      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fe3d 	bl	8004b34 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004edc:	d10b      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f8dd 	bl	80050a2 <RCCEx_PLLSAI1_ConfigNR>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004ef2:	7ffb      	ldrb	r3, [r7, #31]
 8004ef4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fd26 	bl	8004958 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fd45 	bl	80049ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fd2c 	bl	8004984 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004f2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f42:	f7ff fe61 	bl	8004c08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f46:	f7fc fa99 	bl	800147c <HAL_GetTick>
 8004f4a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f4c:	e009      	b.n	8004f62 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4e:	f7fc fa95 	bl	800147c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d902      	bls.n	8004f62 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e004      	b.n	8004f6c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f62:	f7ff fe60 	bl	8004c26 <LL_RCC_PLLSAI1_IsReady>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d137      	bne.n	8004fe2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f86:	4313      	orrs	r3, r2
 8004f88:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fa0:	f7ff fe23 	bl	8004bea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fc fa6a 	bl	800147c <HAL_GetTick>
 8004fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004faa:	e009      	b.n	8004fc0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fac:	f7fc fa66 	bl	800147c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d902      	bls.n	8004fc0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fbe:	e004      	b.n	8004fca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fc0:	f7ff fe31 	bl	8004c26 <LL_RCC_PLLSAI1_IsReady>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d1f0      	bne.n	8004fac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ff8:	f7ff fe06 	bl	8004c08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ffc:	f7fc fa3e 	bl	800147c <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005002:	e009      	b.n	8005018 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005004:	f7fc fa3a 	bl	800147c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	73fb      	strb	r3, [r7, #15]
      break;
 8005016:	e004      	b.n	8005022 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005018:	f7ff fe05 	bl	8004c26 <LL_RCC_PLLSAI1_IsReady>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d137      	bne.n	8005098 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005052:	4313      	orrs	r3, r2
 8005054:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005056:	f7ff fdc8 	bl	8004bea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505a:	f7fc fa0f 	bl	800147c <HAL_GetTick>
 800505e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005060:	e009      	b.n	8005076 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005062:	f7fc fa0b 	bl	800147c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d902      	bls.n	8005076 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	73fb      	strb	r3, [r7, #15]
        break;
 8005074:	e004      	b.n	8005080 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005076:	f7ff fdd6 	bl	8004c26 <LL_RCC_PLLSAI1_IsReady>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d1f0      	bne.n	8005062 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d108      	bne.n	8005098 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050ae:	f7ff fdab 	bl	8004c08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050b2:	f7fc f9e3 	bl	800147c <HAL_GetTick>
 80050b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050b8:	e009      	b.n	80050ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ba:	f7fc f9df 	bl	800147c <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d902      	bls.n	80050ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	73fb      	strb	r3, [r7, #15]
      break;
 80050cc:	e004      	b.n	80050d8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050ce:	f7ff fdaa 	bl	8004c26 <LL_RCC_PLLSAI1_IsReady>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d137      	bne.n	800514e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005108:	4313      	orrs	r3, r2
 800510a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800510c:	f7ff fd6d 	bl	8004bea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fc f9b4 	bl	800147c <HAL_GetTick>
 8005114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005116:	e009      	b.n	800512c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005118:	f7fc f9b0 	bl	800147c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e004      	b.n	8005136 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800512c:	f7ff fd7b 	bl	8004c26 <LL_RCC_PLLSAI1_IsReady>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d1f0      	bne.n	8005118 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d108      	bne.n	800514e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800514a:	4313      	orrs	r3, r2
 800514c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e049      	b.n	80051fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc f80a 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 fb4e 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e049      	b.n	80052ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f841 	bl	80052b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 faf7 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <HAL_TIM_PWM_Start+0x24>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	e03c      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d109      	bne.n	8005306 <HAL_TIM_PWM_Start+0x3e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e02f      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d109      	bne.n	8005320 <HAL_TIM_PWM_Start+0x58>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e022      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d109      	bne.n	800533a <HAL_TIM_PWM_Start+0x72>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	e015      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b10      	cmp	r3, #16
 800533e:	d109      	bne.n	8005354 <HAL_TIM_PWM_Start+0x8c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e008      	b.n	8005366 <HAL_TIM_PWM_Start+0x9e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e079      	b.n	8005462 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0xb6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537c:	e023      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0xc6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800538c:	e01b      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0xd6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800539c:	e013      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xe6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ac:	e00b      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0xf6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	e003      	b.n	80053c6 <HAL_TIM_PWM_Start+0xfe>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fdb0 	bl	8005f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a24      	ldr	r2, [pc, #144]	; (800546c <HAL_TIM_PWM_Start+0x1a4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x12a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a23      	ldr	r2, [pc, #140]	; (8005470 <HAL_TIM_PWM_Start+0x1a8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x12a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a21      	ldr	r2, [pc, #132]	; (8005474 <HAL_TIM_PWM_Start+0x1ac>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x12e>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_TIM_PWM_Start+0x130>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <HAL_TIM_PWM_Start+0x1a4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_PWM_Start+0x158>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d115      	bne.n	800544c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <HAL_TIM_PWM_Start+0x1b0>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d015      	beq.n	800545e <HAL_TIM_PWM_Start+0x196>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005438:	d011      	beq.n	800545e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	e008      	b.n	800545e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e000      	b.n	8005460 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800
 8005478:	00010007 	.word	0x00010007

0800547c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005496:	2302      	movs	r3, #2
 8005498:	e0ff      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b14      	cmp	r3, #20
 80054a6:	f200 80f0 	bhi.w	800568a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	08005505 	.word	0x08005505
 80054b4:	0800568b 	.word	0x0800568b
 80054b8:	0800568b 	.word	0x0800568b
 80054bc:	0800568b 	.word	0x0800568b
 80054c0:	08005545 	.word	0x08005545
 80054c4:	0800568b 	.word	0x0800568b
 80054c8:	0800568b 	.word	0x0800568b
 80054cc:	0800568b 	.word	0x0800568b
 80054d0:	08005587 	.word	0x08005587
 80054d4:	0800568b 	.word	0x0800568b
 80054d8:	0800568b 	.word	0x0800568b
 80054dc:	0800568b 	.word	0x0800568b
 80054e0:	080055c7 	.word	0x080055c7
 80054e4:	0800568b 	.word	0x0800568b
 80054e8:	0800568b 	.word	0x0800568b
 80054ec:	0800568b 	.word	0x0800568b
 80054f0:	08005609 	.word	0x08005609
 80054f4:	0800568b 	.word	0x0800568b
 80054f8:	0800568b 	.word	0x0800568b
 80054fc:	0800568b 	.word	0x0800568b
 8005500:	08005649 	.word	0x08005649
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f9f8 	bl	8005900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0204 	bic.w	r2, r2, #4
 800552e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6999      	ldr	r1, [r3, #24]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	619a      	str	r2, [r3, #24]
      break;
 8005542:	e0a5      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fa54 	bl	80059f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	619a      	str	r2, [r3, #24]
      break;
 8005584:	e084      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 faad 	bl	8005aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0208 	orr.w	r2, r2, #8
 80055a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0204 	bic.w	r2, r2, #4
 80055b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	61da      	str	r2, [r3, #28]
      break;
 80055c4:	e064      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fb05 	bl	8005bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69d9      	ldr	r1, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	021a      	lsls	r2, r3, #8
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	61da      	str	r2, [r3, #28]
      break;
 8005606:	e043      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fb42 	bl	8005c98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0208 	orr.w	r2, r2, #8
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0204 	bic.w	r2, r2, #4
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005646:	e023      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb7a 	bl	8005d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005688:	e002      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	75fb      	strb	r3, [r7, #23]
      break;
 800568e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop

080056a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c>
 80056bc:	2302      	movs	r3, #2
 80056be:	e0b6      	b.n	800582e <HAL_TIM_ConfigClockSource+0x18a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80056de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fc:	d03e      	beq.n	800577c <HAL_TIM_ConfigClockSource+0xd8>
 80056fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005702:	f200 8087 	bhi.w	8005814 <HAL_TIM_ConfigClockSource+0x170>
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	f000 8086 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x176>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	d87f      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 8005714:	2b70      	cmp	r3, #112	; 0x70
 8005716:	d01a      	beq.n	800574e <HAL_TIM_ConfigClockSource+0xaa>
 8005718:	2b70      	cmp	r3, #112	; 0x70
 800571a:	d87b      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 800571c:	2b60      	cmp	r3, #96	; 0x60
 800571e:	d050      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x11e>
 8005720:	2b60      	cmp	r3, #96	; 0x60
 8005722:	d877      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 8005724:	2b50      	cmp	r3, #80	; 0x50
 8005726:	d03c      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0xfe>
 8005728:	2b50      	cmp	r3, #80	; 0x50
 800572a:	d873      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d058      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x13e>
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d86f      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 8005734:	2b30      	cmp	r3, #48	; 0x30
 8005736:	d064      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15e>
 8005738:	2b30      	cmp	r3, #48	; 0x30
 800573a:	d86b      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 800573c:	2b20      	cmp	r3, #32
 800573e:	d060      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15e>
 8005740:	2b20      	cmp	r3, #32
 8005742:	d867      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d05c      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15e>
 8005748:	2b10      	cmp	r3, #16
 800574a:	d05a      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15e>
 800574c:	e062      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6899      	ldr	r1, [r3, #8]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f000 fbc9 	bl	8005ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	609a      	str	r2, [r3, #8]
      break;
 800577a:	e04f      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f000 fbb2 	bl	8005ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800579e:	609a      	str	r2, [r3, #8]
      break;
 80057a0:	e03c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 fb24 	bl	8005dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2150      	movs	r1, #80	; 0x50
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fb7d 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80057c0:	e02c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fb43 	bl	8005e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2160      	movs	r1, #96	; 0x60
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fb6d 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80057e0:	e01c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 fb04 	bl	8005dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2140      	movs	r1, #64	; 0x40
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fb5d 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005800:	e00c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 fb54 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005812:	e003      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      break;
 8005818:	e000      	b.n	800581c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800581a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <TIM_Base_SetConfig+0xbc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x20>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <TIM_Base_SetConfig+0xbc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0x52>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0x52>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <TIM_Base_SetConfig+0xc0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0x52>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <TIM_Base_SetConfig+0xc4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <TIM_Base_SetConfig+0xbc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <TIM_Base_SetConfig+0xa0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a0b      	ldr	r2, [pc, #44]	; (80058f8 <TIM_Base_SetConfig+0xc0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_Base_SetConfig+0xa0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <TIM_Base_SetConfig+0xc4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d103      	bne.n	80058e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	615a      	str	r2, [r3, #20]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0302 	bic.w	r3, r3, #2
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a24      	ldr	r2, [pc, #144]	; (80059ec <TIM_OC1_SetConfig+0xec>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_OC1_SetConfig+0x70>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a23      	ldr	r2, [pc, #140]	; (80059f0 <TIM_OC1_SetConfig+0xf0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_OC1_SetConfig+0x70>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a22      	ldr	r2, [pc, #136]	; (80059f4 <TIM_OC1_SetConfig+0xf4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10c      	bne.n	800598a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0308 	bic.w	r3, r3, #8
 8005976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <TIM_OC1_SetConfig+0xec>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC1_SetConfig+0xa2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <TIM_OC1_SetConfig+0xf4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC1_SetConfig+0xa2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <TIM_OC1_SetConfig+0xf0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40014800 	.word	0x40014800
 80059f4:	40014400 	.word	0x40014400

080059f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0320 	bic.w	r3, r3, #32
 8005a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a22      	ldr	r2, [pc, #136]	; (8005ae0 <TIM_OC2_SetConfig+0xe8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d10d      	bne.n	8005a78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <TIM_OC2_SetConfig+0xe8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d007      	beq.n	8005a90 <TIM_OC2_SetConfig+0x98>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <TIM_OC2_SetConfig+0xec>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC2_SetConfig+0x98>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <TIM_OC2_SetConfig+0xf0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d113      	bne.n	8005ab8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800

08005aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <TIM_OC3_SetConfig+0xe4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10d      	bne.n	8005b6a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <TIM_OC3_SetConfig+0xe4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_OC3_SetConfig+0x96>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <TIM_OC3_SetConfig+0xe8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC3_SetConfig+0x96>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <TIM_OC3_SetConfig+0xec>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d113      	bne.n	8005baa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	031b      	lsls	r3, r3, #12
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <TIM_OC4_SetConfig+0xb0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_OC4_SetConfig+0x74>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <TIM_OC4_SetConfig+0xb4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC4_SetConfig+0x74>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <TIM_OC4_SetConfig+0xb8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d109      	bne.n	8005c64 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <TIM_OC5_SetConfig+0xa4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_OC5_SetConfig+0x6a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <TIM_OC5_SetConfig+0xa8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC5_SetConfig+0x6a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a11      	ldr	r2, [pc, #68]	; (8005d44 <TIM_OC5_SetConfig+0xac>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d109      	bne.n	8005d16 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800

08005d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	051b      	lsls	r3, r3, #20
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <TIM_OC6_SetConfig+0xa8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC6_SetConfig+0x6c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <TIM_OC6_SetConfig+0xac>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC6_SetConfig+0x6c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <TIM_OC6_SetConfig+0xb0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d109      	bne.n	8005dc8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0210 	bic.w	r2, r3, #16
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f043 0307 	orr.w	r3, r3, #7
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	021a      	lsls	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2201      	movs	r2, #1
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	43db      	mvns	r3, r3
 8005f56:	401a      	ands	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e04a      	b.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d108      	bne.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a12      	ldr	r2, [pc, #72]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d10c      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4313      	orrs	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4d0d      	ldr	r5, [pc, #52]	; (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2600      	movs	r6, #0
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4d0b      	ldr	r5, [pc, #44]	; (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	; (8006084 <__libc_init_array+0x44>)
 8006054:	f000 f820 	bl	8006098 <_init>
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2600      	movs	r6, #0
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	0800615c 	.word	0x0800615c
 800607c:	0800615c 	.word	0x0800615c
 8006080:	0800615c 	.word	0x0800615c
 8006084:	08006160 	.word	0x08006160

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <_init>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr

080060a4 <_fini>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr
